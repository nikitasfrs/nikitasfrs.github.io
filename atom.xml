<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Nikitas Frantzeskakis]]></title>
    <link href="http://nikitasfr.com/atom.xml" rel="self"/>
    <link href="http://nikitasfr.com/"/>
    <updated>2015-09-08T05:49:07+00:00</updated>
    <id>http://nikitasfr.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Building testable applications with Backbone.js]]></title>
            <link href="http://nikitasfr.com/blog/2015/08/31/building-testable-applications-with-backbone/"/>
            <updated>2015-08-31T00:00:00+00:00</updated>
            <id>http://nikitasfr.com/blog/2015/08/31/building-testable-applications-with-backbone/</id>
            <content type="html"><![CDATA[<p>Piecing libraries together to quickly produce a result can be one thing; building maintainable applications and test suites around them however, can be quite another.</p>

<p>The former approach leads in spending endless hours of frustration and mismanagement, while the latter in the freedom or mastery of &ldquo;bending&rdquo; tools and abstractions to serve business requirements in a precise way, an ability that can be discerned in skilled engineers.</p>

<p>While the quick approach can be our only choice in certain situations, one will eventually need to incorporate testing in the development process, sooner or later, if there's any hope of achieving anything beyond a mere prototype.</p>

<!--more-->

<p>Testing goes hand-in-hand with refactoring however, so basic code organization skills along with an understanding of any frameworks our code is based upon, are essential to the process.</p>

<p>The discipline of testing has many facets and for the purposes of this post I have included an overview of inheritance in Backbone with a series of code organization and testing recipes that have been proved to me to be really useful.</p>

<p>Let's jump right in and have a look at how the inheritance model is built in Backbone.js base objects.</p>

<h2 id="inheritance-in-backbone">Inheritance in Backbone</h2>

<p>Backbone provides us with a powerful way to extend its base objects. This section assumes knowledge of objects, prototypes functions and scopes in JavaScript.</p>

<p>As we will see later on when we'll be using a test framework to spy on methods expecting certain results back, without clear understanding of this behaviour of the framework we would be unable to test important parts of our code.</p>

<p>We will focus on the following piece of code for the remainder of this post:</p>

<pre><code class="js">var Widget = Backbone.View.extend({
    initialize: function (opt) {
        this.listenTo(this.model, 'change', this.render);
    },
    someMethod: function () {
        console.log('I am a method');
        return this;
    },
    render: function () {
        return this;
    }
});
var widget = new Widget({
    el: '#element',
    model: widgetModel
})
</code></pre>

<p>Keeping everything in mind as two distinct phases, type creation and instantiation respectively, occuring at different moments in time, helps us understand how inheritance in Backbone works.</p>

<h3 id="creating-the-type">Creating the type</h3>

<p>Having a look at Backbone's source code we can see that objects passed as first argument in extend, get mixed-in with the prototype of the resulting object.</p>

<p>Let's examine what happens when we call extend from a Backbone object in more detail (view the source code for this section <a href="http://backbonejs.org/docs/backbone.html#section-245">here</a>):</p>

<ol>
<li>Resulting object stores the original base constructor function, without calling it.</li>
<li>Static properties are mixed with the resulting object, if supplied.</li>
<li>Prototype chain is setup using a surrogate object.</li>
<li>Prototype properties are mixed with the resulting object, if supplied.</li>
<li>A reference pointing to the parent's prototype is stored in &#95;&#95;super&#95;&#95; and the resulting object is returned.</li>
</ol>

<p>Widget results in a constructor which&mdash;once invoked in the next phase&mdash;will immediately call Backbone.View (the base constructor), and carries in its prototype all of our additional properties.</p>

<h3 id="creating-the-instance">Creating the instance</h3>

<p>Here's what's happening inside the Backbone.View base constructor (view the source code for this section <a href="http://backbonejs.org/docs/backbone.html#section-147">here</a>):</p>

<ol>
<li>A unique ID is generated for the resulting object.</li>
<li>The resulting object gets assigned a series of specific instance properties or methods (model, collection, el, etc..) , if these are specified.</li>
<li>DOM setup takes place.</li>
<li>initialize gets called and the resulting object is returned.</li>
</ol>

<p>Of this second series of steps, our focus will be mainly placed on steps 2 and 4, which are common to all Backbone base objects (not just the View.)</p>

<p>It can be useful to think this phase happening when the <em>new</em> keyword in our code is encountered, as this is where the constructor is called.</p>

<h2 id="code-organization">Code organization</h2>

<p>We should now look at some simple ways to organize your code, that can make it lend itself to the power of our test suits, with ease.</p>

<h3 id="module-management">Module management</h3>

<p>I have incorporated <a href="https://en.wikipedia.org/wiki/CommonJS">CommonJS</a> into my workflow and gave browserify a try during this summer. This proved to be a great choice in many situations.</p>

<p>As much as I like the AMD pattern and used it in many projects, I have to admit that the CommonJS syntax is way more terse and can be customized to suit our needs easily.</p>

<p>There's also the additional benefit that we can dissect pieces of our code using the Node REPL and its libraries directly, which can make the process of testing really efficient.</p>

<p>Having a consistent way of exposure across all modules makes code more predictable resulting in a clean API.
Remember, the state our code is in will eventually be reflected back to us once we begin writing tests for it. Sorting these details out from the beginning goes a long way.</p>

<pre><code class="js">// PageControlView.js
var PageControlView = Backbone.View.extend({});
module.exports = function (opt) {
    return new PageControlView(opt);
}
module.exports.getClass = function () {
    return PageControlView;
}

// SomeOtherModule.js
var pageControlView = require('./js/views/pageControl')({ prop: prop });
var PageControlView = require('./js/views/pageControl').getClass();
</code></pre>

<p>The getClass() method is ofcourse syntactic sugar for returning a reference to the constructor, which we'll be needing. Inlining instantiation this way can be really handy as well.</p>

<p>CommonJS modules can be bundled together into a single JavaScript file for use by the client-side using the <a href="http://browserify.org/">browserify</a> node module.</p>

<p>If you use the Underscore templates, you will also going to need the <a href="https://www.npmjs.com/package/brfs">brfs transform</a>, which browserify can process your modules with, to compile your templates into JavaScript code that can then be included as a CommonJS module.</p>

<p>We can then include templates in our modules like this,</p>

<pre><code class="js">var fs = require('fs');
var pagesTmp = fs.readFileSync(__dirname + '/../templates/pages.html', 'utf8');
</code></pre>

<p>and browserify will inline the compiled JavaScript, living the code in a form that will still work in the console at the same time, which as we'll see will be very handy.</p>

<p>Here's how to install browserify with brfs and an example of bundling your code using them:</p>

<pre><code class="bash">npm install -g browserify # Install browserify globally
npm install --save-dev brfs # Install brfs
browserify -t brfs js/main.js &gt; bundle.js # Create your bundle
</code></pre>

<p>Grunt plugins also exist that can make the bundling process automatic.</p>

<h3 id="setting-up-an-event-bus">Setting up an event-bus</h3>

<p>Writing maintanable code also means having the freedom to switch between different implementations of modules without breaking the code or need to rewrite a large part of it.</p>

<p>The way our modules interact with each other play the most significant role in this case. Fortunately, Backbone is heavily based on events and message passing and we can utilize this behaviour right away.</p>

<p>A module that uses events, does not need to be tied to the behaviour of another. It can simply notify all of its subscribers that something significant has happened and let them respond to it on their own.</p>

<p>A quick solution is to create an event-bus, a simplified pub/sub implementation, that will be passed as dependency in each module.
That way we can trigger events from and subscribe to, our event-bus. Here's an example:</p>

<pre><code class="js">var eventbus = _.extend({}, Backbone.Events);

var SomeView = Backbone.View.extend({
    initialize: function(opt) {
        this.eventbus = opt.eventbus;
        this.listenTo(this.eventbus, 'widget:closed', this.doSmth);
    },
    events: {
        'click #submit': 'clicked'
    },
    clicked: function() {
        this.eventbus.trigger('someview:submit:clicked');
    },
    doSmth: function() {
        // ...
    }
});
</code></pre>

<p>We don't have to worry about the behaviour of other objects anymore, as each module can exist on its own.</p>

<p>A whole lot can be written about programming with events, about their correct use and their flow or direction but these are beyond the scope of this post.</p>

<h2 id="writing-the-tests">Writing the tests</h2>

<p>Having tried a couple combinations of tools and test frameworks, I ended up using the <a href="http://mochajs.org">Mocha</a>-<a href="http://sinonjs.org">Sinon</a>-<a href="http://chaijs.com">Chai</a> stack and test my code from the command-line.</p>

<pre><code class="bash">npm install -g mocha 
npm install --save-dev sinon chai jsdom@4.2.0
</code></pre>

<p>Sinon is used for things like mocks, spies and stubs, Chai equips us with any assertion style one might need, and Mocha is used as a test-runner that can be configured to suit every need.</p>

<p>My focus is placed more on the way data is handled by the code and the way each module interacts with each other, as this is the place where most of my bugs occur most of the time.</p>

<p>A DOM implementation will be required however, should we decide to test our Backbone Views, and as this is normally provided by the browser, we would need to an implementation that is &ldquo;digestible&rdquo; by node, the <a href="https://github.com/tmpvar/jsdom">jsdom</a>.</p>

<h3 id="spying-on-backbone-events">Spying on Backbone events</h3>

<p>Sinon provides us with <a href="http://sinonjs.org/docs/#spies">spies</a>, a very useful feature, that helps us learn things like how many times the method we're spying on has been called during a test, with what arguments etc.</p>

<p>Spies, according to the <a href="http://sinonjs.org/docs/">docs</a>, work by wrapping our method in another function and by storing a reference to the original one so that we can restore it later.</p>

<p>The following is a trivial example, using the widget object from backbone inheritance section, which passes our test:</p>

<pre><code class="js">var widget = new Widget();
var render = sinon.spy(widget, 'render');
widget.render();
assert.isTrue(render.spy.called);
</code></pre>

<p>Let's now try to trigger a change event in widget's associated model:</p>

<pre><code class="js">var render = sinon.spy(widget, 'render');
widget.model.trigger('change');
assert.isTrue(render.spy.called);
</code></pre>

<p>No matter how many times we may try running this last test however, it will always fail to pass our assertion.</p>

<p>If we take a look back at the definition of Widget, we can see that listenTo is called inside initialize:</p>

<pre><code class="js">var Widget = Backbone.View.extend({
    initialize: function (opt) {
        this.listenTo(this.model, 'change', this.render);
    },
    // ...
</code></pre>

<p>Sinon fails to wrap the callback function, as this occurs inside initialize, which is called by the constructor (at instantiation) before the wrapping takes place. As a result Backbone will keep calling the original function and not the spy we have created.</p>

<p>As functions in JavaScript are first-class objects, <em>passed by reference</em>, Sinon may wrap the render method succesfully, but the reference to the originl function has been set into memory and used by Backbone events code and will not be affected.</p>

<p>One solution would be to redefine initialize in our tests, calling sinon spy inside it, but I prefer the following which is even more terse:</p>

<pre><code class="js">var Widget = require('../js/views/widget').getClass();
var spy = sinon.spy(Widget.prototype, 'render');
var widget = new Widget({
    model: require('../js/model/model')() 
});
widget.model.trigger('change');
assert.isTrue(spy.called);
</code></pre>

<p>We create a reference to the constructor and use the Sinon spy to wrap Widget's prototype render function, <strong>before</strong> instantiating our new widget object. Our test now succesfully passes our assertion!</p>

<p>Spying on the Widget.prototype.render method before instantiation from the very beginning, ensures that this will be the reference Backbone will be using for our function.</p>

<p>We would be unable to figure all that out however, had we not taken the time to understand the internals of Backbone and how its inheritance model works.</p>

<p>These last two snippets also demonstrate the versality of the module pattern mentioned in the module management section: instantiating with a single require statement in the case of the model, and requiring the constructor function, in the case of Widget.</p>

<h2 id="closing-thoughts">Closing thoughts</h2>

<p>We have examined several ways one can write testable code with Backbone.js and discussed couple of best practices that can make the process easier.</p>

<p>Deep understanding of the dynamic nature of JavaScript along with knowledge on how frameworks we use work, is of vast importance in writing tests and help us discover bugs easier.</p>

<p>Testing leads in building maintainable applications and it immediately puts us in the right path towards accomplishing exactly that.</p>

<p>Writing testable code on top of the concise, well-written code of Backbone.js can help us boost our development workflow and productivity and be ready to tackle any challenge that might arise.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Front-end tools and practices for efficient web development]]></title>
            <link href="http://nikitasfr.com/blog/2015/04/05/front-end-tools-and-practices/"/>
            <updated>2015-04-05T00:00:00+00:00</updated>
            <id>http://nikitasfr.com/blog/2015/04/05/front-end-tools-and-practices/</id>
            <content type="html"><![CDATA[<p>A client-side workflow plays a significant part in creating optimized and maintainable websites. Here's a small overview of the client-side stack I have recently been using.</p>

<h3 id="semantic-markup">Semantic markup</h3>

<p>I use <a href="http://twig.sensiolabs.org/">Twig</a>, a powerful templating engine and I keep my HTML documents as pure and semantic as I can. I often remind myself to keep things simple and try to separate the content from its styling or presentation, the former belonging to the HTML document, while the latter in the CSS file.</p>

<!--more-->

<p>CSS frameworks served me well in the past especially for prototyping, however conforming totally to their way of doing things without having spent time to create and tune my own workflow, resulted most of the times in a non-semantic markup which was hard to maintain.</p>

<p>Having to edit HTML files to change grid settings for a specific element by adding or removing the appropriate classes for example as some framework dictates can be really inconvenient, especially when these templates get splitted into many parts and processed by the backend before they get served to the client.</p>

<p>Using semantic markup is a simple first step that results in making our views maintainable and aids in keeping our structure clean so that we can utilize the power our templating engine(s) provides us with. Each element thus gets assigned an ID or class that describes the content it represents, taking care to avoid using identifiers related to its presentation.</p>

<h3 id="css-pre-processor">CSS pre-processor</h3>

<p>A CSS pre-processor supports many interesting features that are currently missing from the original CSS and provides things like variables, loops, mixins and functions so one can really tune and automate the way things get done with stylesheets in general.</p>

<p>Since automation is always good, and as I've been reading many good things about <a href="http://sass-lang.com/">Sass</a>, I decided to give it a try. There's also a strong community supporting it and a huge set of libraries and frameworks written in Sass. The normal CSS syntax can also be used so it can be learned pretty quickly.</p>

<p>Using a CSS pre-processor you have the ability to create stylesheets in many files (partials) which can later be merged to a single final minified CSS file that would normally be served to the client.</p>

<h3 id="semantic-grid">Semantic grid</h3>

<p>Having a grid we can set elements in, each of them taking up a specified amount of columns is a very handy abstraction. There are two criteria that I like to take into consideration when choosing a grid framework or library: the freedom to maintain semantic structure and compatibility with our CSS pre-processor of choice, in my case Sass.</p>

<p>I have been very happy using <a href="http://susydocs.oddbird.net/en/latest/">Susy</a>, a grid framework written in Sass, that does all the math for you and lets you create awesome layouts. It is completely unopinionated and does not get in your way. 
Using Susy, changing our layout and column sizes becomes only a matter of changing the values for a couple of variables in our Sass files, so simple!</p>

<p>Another point where it really shines, is the way it handles media queries which relies on the amazing Sass library, <a href="http://breakpoint-sass.com/">Breakpoint</a>. Every element gets assigned different amount of columns for different breakpoints whenever we need to apply changes for different viewports and this is extremely helpful.</p>

<h3 id="javascript-modules">Javascript modules</h3>

<p>I have been looking for an easy and extendable way to include and manage Javascript in my web applications, which can be optimized for mobile phones. Many backend frameworks have components that let you manage and include Javascript files in your application, however this is not always an optimal or convenient option for a non-trivial project. What would happen if at some point we need to change the server-side technology?</p>

<p>Separating our code into multiple files really helps but then having to load files synchronously via multiple script tags creates performace issues, DOM content will not load until all the tags defined in the head section complete loading first, which becomes more evident when the site gets accessed by mobile phones and slow connections. Simple workarounds such as placing the script tags at the end exist, though most of the times these are not really the answer.</p>

<p>Having a completely independent way to include, merge and minify your code, and by using the very useful <a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html">module pattern</a>, you can write more efficient modular code, while at the same time minimizing the coupling between client and server code and decreasing load times.</p>

<p>To handle all these issues I use <a href="http://requirejs.org/">RequireJS</a> a Javascript module loader. Its AMD web module support gives you the power to split your code into separate files that get loaded asynchronously. Code can be reused and all our files can be cleanly organised.</p>

<p>RequireJS comes with its own optimizer and can be used to build your project into a single minified file (or a couple of minified files depending on your configuration and the way you prefer to bundle your project&mdash;possibilities are endless.)
Structuring our project with RequireJS we are able write our code into many separate modules and we can minimize the requests to the server by building the project into a single file for the production environment whenever we need to.</p>

<h3 id="build-process">Build process</h3>

<p>Introducing these tools to make our lives easier comes at a price, and a quick way to rebuild our project whenever we make changes soon will soon become essential. We have to be able to listen for changes in our scripts and in our stylesheets and perform the necessary tasks that need to be performed for all the different environments we decide to create our projects in.</p>

<p>Fortunately tools exist for exactly this purpose and the one I have been using is <a href="http://gruntjs.com/">Grunt</a>, a Javascript task-runner that can be installed and managed via <a href="https://www.npmjs.com/">npm</a>, the <a href="https://nodejs.org/">Node.js</a> package manager.</p>

<p>Grunt supports plugins that cover almost every need, it is really simple to use, and gives you the ability to register many tasks covering every need. I am even using it right now in composing this post, letting it sit quietly in the background and listen for changes in my markdown files, awaiting to build the project every time I make changes, through the
<a href="https://github.com/florianeckerstorfer/grunt-sculpin">grunt-sculpin</a>
plugin which takes care running the sculpin command-line tool.</p>

<h3 id="closing-thoughts">Closing thoughts</h3>

<p>Creating a workflow for the front-end, keeping it separated from the server-side technologies, forms a necessary foundation for all those changes and requirements that might suddenly arise, so we can keep our focus on the essence or functionality our project needs.</p>

<p>As a result, the whole web stack gets easier to manage and everything finds its proper place in the spectrum of technologies we are using. Our server-side code becomes lean and is used for the functionality, database access
and every other aspect we need our server to handle, while our client-side stack ensures us that information gets presented in a maintainable, optimized and responsive way.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[First post]]></title>
            <link href="http://nikitasfr.com/blog/2014/12/31/first-post/"/>
            <updated>2014-12-31T00:00:00+00:00</updated>
            <id>http://nikitasfr.com/blog/2014/12/31/first-post/</id>
            <content type="html"><![CDATA[<p>My blog is finally live, and I am very excited! Sculpin is very simple to use and I find the way of creating blog posts simply by editing a markdown file and pushing changes to a repository, really convenient.</p>

<p>At this point I can only think of this blog and website as way of &ldquo;leaving a trail behind&rdquo; in the form of blog posts, both for myself by having a handy way to collect or revise information for future reference and for anyone else that might find something useful in these.</p>
]]></content>
        </entry>
    </feed>